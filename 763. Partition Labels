/*
763. Partition Labels
 A string S of lowercase letters is given. We want to partition this string into as many parts as possible so that each letter appears in at most one part, and return a list of integers representing the size of these parts.

Example 1:

Input: S = "ababcbacadefegdehijhklij"
Output: [9,7,8]
Explanation:
The partition is "ababcbaca", "defegde", "hijhklij".
This is a partition so that each letter appears in at most one part.
A partition like "ababcbacadefegde", "hijhklij" is incorrect, because it splits S into less parts.

Note:

    S will have length in range [1, 500].
    S will consist of lowercase letters ('a' to 'z') only.

*/

class Solution {
	public List<Integer> partitionLabels(String s) {
        List<Integer> list =new ArrayList<Integer>();
        if(s==null||s.isEmpty())
            return list;
        Integer end = -1;
        Integer start = -1;
        Integer i=0;
        Integer length = s.length();
        Integer lastIndex;
        while(i<length){
            
            lastIndex = s.lastIndexOf(s.charAt(i));
            
            if(end<lastIndex){
                end = lastIndex;
            }
            
            if(end==i){
                list.add(end-start);
                start = end;
            }
            i++;
        }
        return list;
    }
}
