/*
A website domain like "discuss.leetcode.com" consists of various subdomains. At the top level, we have "com", at the next level, we have "leetcode.com", and at the lowest level, "discuss.leetcode.com". When we visit a domain like "discuss.leetcode.com", we will also visit the parent domains "leetcode.com" and "com" implicitly.

Now, call a "count-paired domain" to be a count (representing the number of visits this domain received), followed by a space, followed by the address. An example of a count-paired domain might be "9001 discuss.leetcode.com".

We are given a list cpdomains of count-paired domains. We would like a list of count-paired domains, (in the same format as the input, and in any order), that explicitly counts the number of visits to each subdomain.

Example 1:
Input: 
["9001 discuss.leetcode.com"]
Output: 
["9001 discuss.leetcode.com", "9001 leetcode.com", "9001 com"]
Explanation: 
We only have one website domain: "discuss.leetcode.com". As discussed above, the subdomain "leetcode.com" and "com" will also be visited. So they will all be visited 9001 times.

Example 2:
Input: 
["900 google.mail.com", "50 yahoo.com", "1 intel.mail.com", "5 wiki.org"]
Output: 
["901 mail.com","50 yahoo.com","900 google.mail.com","5 wiki.org","5 org","1 intel.mail.com","951 com"]
Explanation: 
We will visit "google.mail.com" 900 times, "yahoo.com" 50 times, "intel.mail.com" once and "wiki.org" 5 times. For the subdomains, we will visit "mail.com" 900 + 1 = 901 times, "com" 900 + 50 + 1 = 951 times, and "org" 5 times.

Notes:

    The length of cpdomains will not exceed 100. 
    The length of each domain name will not exceed 100.
    Each address will have either 1 or 2 "." characters.
    The input count in any count-paired domain will not exceed 10000.
    The answer output can be returned in any order.


*/

/*
题目思路：首先对于每一个字符串进行分割，用indexOF与substring方法比split方法更快，快三倍左右。然后把分割后的放入hashmap中，再次进行下一轮切割。
存入hashmap完毕之后，放入stringbuilder中，stringbuilder对于单线程来说，效率最高，其次是stringbuffer与string，进行拼接，拼接结束后，放入list存储。

*/
class Solution {
    public List<String> subdomainVisits(String[] cpdomains) {
    	
    	HashMap<String, Integer> map = new HashMap<>();
    	List<String> list = new ArrayList<>();

    	for(String domain:cpdomains) {
    		int index = domain.indexOf(" ");
    		int val = Integer.valueOf(domain.substring(0,index));
    		
    		do {
    			domain = domain.substring(index+1);
    			map.put(domain, map.getOrDefault(domain,0) + val);
    			index = domain.indexOf(".");
    		}while(index!=-1);
    	}
    	
		Iterator itr = map.keySet().iterator();
		while(itr.hasNext()) {
			StringBuilder str = new StringBuilder();
			String key = (String) itr.next();
			str.append(String.valueOf(map.get(key)));
			str.append(" ");
			str.append(key);
			list.add(str.toString());
		}
    	
    	
        return list;
    }
}
