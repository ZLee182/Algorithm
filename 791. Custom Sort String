/*
791. Custom Sort String

S and T are strings composed of lowercase letters. In S, no letter occurs more than once.

S was sorted in some custom order previously. We want to permute the characters of T so that they match the order that S was sorted. More specifically, if x occurs before y in S, then x should occur before y in the returned string.

Return any permutation of T (as a string) that satisfies this property.

Example :
Input: 
S = "cba"
T = "abcd"
Output: "cbad"
Explanation: 
"a", "b", "c" appear in S, so the order of "a", "b", "c" should be "c", "b", and "a". 
Since "d" does not appear in S, it can be at any position in T. "dcba", "cdba", "cbda" are also valid outputs.

 

Note:

    S has length at most 26, and no character is repeated in S.
    T has length at most 200.
    S and T consist of lowercase letters only.


*/
/*
思路：写一个201范围的数组，两个字符串进行相同数据查询，若相同，则写入数组中。再将数组中出现过的字母，从t中去掉，余下剩余未出现过的字符串。再加上数组组成的字符串，打完收工。
*/
class Solution {
    public String customSortString(String s, String t) {
        String str="";
        char[] let=new char[201];
        int k=0;
        
        for(int i=0;i<s.length();i++)
            for(int j=0;j<t.length();j++)
                if(s.charAt(i) == t.charAt(j)) {
                	let[k] = s.charAt(i);
                	k++;
                }
            
        
        for(int i=0;i<k;i++)
        	t = t.replaceAll(String.valueOf(let[i]), "");
        
        for(int i=0;i<k;i++) 
        	str+= let[i];
        
        str+=t;
        return str;
    }
}
